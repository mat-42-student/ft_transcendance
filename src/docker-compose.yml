services:
  nginx:
    container_name: nginx
    build:
      context: nginx
      dockerfile: Dockerfile
    image: nginx
    depends_on:
      - pong
    ports:
      - "3000:443"
    volumes:
      - ./frontend:/usr/share/nginx/frontend
    networks:
      - nginx-network

  postgres:
    container_name: posgresql
    image: postgres
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/posgresql/data
    environment:
      POSTGRES_DB: transcendance
      POSTGRES_USER: toto
      POSTGRES_PASSWORD: test
    networks:
      - db-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d transcendance -U toto"]
      interval: 3s
      timeout: 2s
      retries: 5

  # apitest:
  #   container_name: apitest
  #   build:
  #     context: django
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./django/code/api:/code
  #   depends_on:
  #     - postgres
  #   expose:
  #     - "8000"
  #   networks:
  #     - nginx-network
  #     - db-network

  redis:
    container_name: redis
    image: redis
    expose:
      - 6379
    networks:
      - redis-network
    
  pong:
    container_name: pong
    build:
      context: _Pong
      dockerfile: Dockerfile
    environment:
      - PYTHONUNBUFFERED=1  # DÃ©sactiver le buffering des sorties Python
    volumes:
      - ./_Pong/:/code
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_healthy
    expose:
      - "8006"
    networks:
      - nginx-network
      - db-network
      - redis-network

volumes:
  postgres_data:

networks:
  nginx-network:
    driver: bridge
  db-network:
    driver: bridge
  redis-network:
    driver: bridge