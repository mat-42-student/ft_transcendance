networks:
  dev-network:
    driver: bridge

volumes:
  postgres_data:
  media:
  static_volume:
  vault_data:

services:
  vault:
    container_name: vault
    build:
      context: ./vault
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./vault/logs:/var/log
      - vault_data:/vault/file
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dev-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8200/v1/sys/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  auth:
    container_name: auth
    build:
      context: ./auth
      dockerfile: Dockerfile
    volumes:
      - ./auth:/app
      - static_volume:/app/staticfiles
      - vault_data:/vault/file
    depends_on:
      postgres:
        condition: service_healthy
      vault:
        condition: service_healthy
    expose:
      - "8000"
    env_file:
      - .env
    environment:
      - SERVICE_NAME=auth
    restart: on-failure
    networks:
      - dev-network

  users:
    container_name: users
    image: users
    build:
      context: ./users
      dockerfile: Dockerfile
    expose:
      - "8000"
    volumes:
      - ./users:/app
      - ./media:/media
      - vault_data:/vault/file
    env_file:
      - .env
    environment:
      - SERVICE_NAME=users
    networks:
      - dev-network
    restart: on-failure
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 3
    depends_on:
      auth:
        condition: service_started
      vault:
        condition: service_healthy

  chat:
    container_name: chat
    build:
      context: chat
      dockerfile: Dockerfile
    stop_grace_period: 2s
    env_file:
      - .env
    environment:
      - SERVICE_NAME=chat
    depends_on:
      redis:
        condition: service_started 
      auth:
        condition: service_started 
      vault:
        condition: service_healthy
    volumes:
      - ./chat/:/app
      - vault_data:/vault/file
    networks:
      - dev-network
    restart: on-failure

  social:
    container_name: social
    build:
      context: social_project
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - SERVICE_NAME=social
    volumes:
      - ./social_project/:/app
      - vault_data:/vault/file
    depends_on:
      redis:
        condition: service_started 
      auth:
        condition: service_started
      vault:
        condition: service_healthy
    networks:
      - dev-network
    restart: on-failure

  gateway:
    container_name: gateway
    build:
      context: gateway
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - SERVICE_NAME=gateway
    volumes:
      - ./gateway/:/app
      - vault_data:/vault/file
    depends_on:
      matchmaking:
        condition: service_started
      vault:
        condition: service_healthy
    expose:
      - "8057"
    networks:
      - dev-network
    restart: on-failure

  matchmaking:
    container_name: matchmaking
    build:
      context: matchmaking
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - SERVICE_NAME=matchmaking
    volumes:
      - ./matchmaking:/app
      - vault_data:/vault/file
    depends_on:
      postgres:
        condition: service_healthy
      pong:
        condition: service_started
      auth:
        condition: service_started
      vault:
        condition: service_healthy
    expose:
      - "8000"
    networks:
      - dev-network
    restart: on-failure

  nginx:
    container_name: nginx
    image: nginx
    build:
      context: nginx
      dockerfile: Dockerfile
    ports:
      - "3000:443"    # Public port (frontend)
      - "8443:8443"   # Internal port (backend services)
    depends_on:
      vault:
        condition: service_healthy
      users:
        condition: service_started
      auth:
        condition: service_started
      matchmaking:
        condition: service_started
      gateway:
        condition: service_started
    environment:
      - SERVICE_NAME=nginx
    volumes:
      - ./media:/media
      - ./frontend:/usr/share/nginx/frontend
      - static_volume:/app/staticfiles
      # - ./certs/ca/ca.crt:/etc/nginx/ssl/ca.crt:ro
      - vault_data:/vault/file
    networks:
      - dev-network
    restart: on-failure

  pong:
    container_name: pong
    build:
      context: pong
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - SERVICE_NAME=pong
    volumes:
      - ./pong/:/app
      - vault_data:/vault/file
    depends_on:
      redis:
        condition: service_started
      vault:
        condition: service_healthy
    expose:
      - "8006"
    networks:
      - dev-network
    restart: on-failure

  cli:
    container_name: cli
    image: alpine
    command: sh -c "apk add --no-cache websocat bash && trap 'exit 0' TERM; sleep infinity & wait"
    networks:
      - dev-network
      
  postgres:
    container_name: postgres
    image: postgres:alpine
    expose:
      - "5432"
    volumes:
        - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d transcendance -U toto"]
      interval: 1s
      timeout: 1s
      retries: 5
    restart: on-failure

  redis:
    container_name: redis
    image: redis:alpine
    expose:
      - "6379"
    networks:
      - dev-network
    restart: on-failure
    

